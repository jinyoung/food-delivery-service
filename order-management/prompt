Please implement for this Event Storming Model:

{"_type":"BoundedContext","aggregates":[{"aggregateRoot":{"_type":"AggregateRoot","fieldDescriptors":[{"className":"String","name":"orderId","displayName":"Order ID","_type":"FieldDescriptor"},{"className":"String","name":"restaurantId","displayName":"Restaurant ID","_type":"FieldDescriptor"},{"className":"String","name":"status","displayName":"Order Status","_type":"FieldDescriptor"},{"className":"statusType","name":"statusType","displayName":"Order Status 유형","_type":"FieldDescriptor"}]},"commands":[{"_type":"Command","fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"}],"name":"AcceptOrder","displayName":"Accept Order"},{"_type":"Command","fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"}],"name":"RejectOrder","displayName":"Reject Order"},{"_type":"Command","fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"}],"name":"PrepareFood","displayName":"Prepare Food"},{"_type":"Command","fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"}],"name":"NotifyRider","displayName":"Notify Rider"},{"_type":"Command","fieldDescriptors":[],"name":"CompleteDelivery"}],"events":[{"fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"}],"name":"OrderAccepted","displayName":"Order Accepted","_type":"Event"},{"fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"}],"name":"OrderRejected","displayName":"Order Rejected","_type":"Event"},{"fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"}],"name":"FoodPrepared","displayName":"Food Prepared","_type":"Event"},{"fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"}],"name":"NotificationSentToRider","displayName":"Notification Sent To Rider","_type":"Event"}],"name":"Order","displayName":"Order","_type":"Aggregate"}],"name":"order-management","displayName":"Order Management","policies":[{"fieldDescriptors":[],"name":"DeliveryCompletionPolicy","displayName":"Delivery Completion Policy","_type":"Policy"}]}


I want to utilize following techniques:

- clean architecture
- spring-boot3
- spring-data-rest
- JPA (must use package jakarta.persistence.* instead of javax.persistence.*)
- H2 DB
- Lombok
- Kafka with spring-cloud-streams library 
- JUnit Test


SELF-CRITICISM: 
 - when you create pom.xml, USE correct parent project to spring boot 3
 - when you create pom.xml, you MUST specify the version: 3.1.3 ONLY for the spring-cloud-streams
 - Please generate start from pom.xml


when you create execution shell (run.sh), please add '--no-transfer-progress' option not to output transfer progress if there's mvn command:

```
mvn [command] --no-transfer-progress
```

